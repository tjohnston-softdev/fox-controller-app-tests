This text file is going to explain the different folders in the project, what they are for, and what files might be kept there. As you work on the test script, you may feel the need to add new folders and sub-folders for different sorts of files. However, it would be best to describe the existing folders first so that may help you decide whether a new folder is necessary, or an existing one would work fine.

* app:
This folder is used for storing script files needed for the testing project at large. 'app' being a shorthand for 'Application'. In summary, if the file is going to be needed across multiple different parts, it should be placed here. The file could be anything from one containing shortcut test functions, or a local script that fufills some purpose that 3rd party modules cannot. 

If the whole project depends on a particular file, it should be tested in part A. If only some parts depend on a file, it should be tested in part C



* app/paths/files:
This sub-folder is used for storing the paths to common files both within the test project and the Controller itself. These files were originally stored in the 'app' folder. The reason they were moved to a sub-folder is so that they sit at the same level as a test script calling a required file. This is so that when writing a relative path to a file, it would look the same between writing in the path file and writing from a test script, and that the two scripts would start at the same 'location' when referring to a required file.

'root/app/paths/files/example.js'
'root/test-parts/part-x-example_name/example/e-script.js'

In short, you can write a relative path inside an 'app/paths/files' script and when that path is used, it would refer to the target just the same.

Files in this folder are tested in part A, under the file 'itm-app_paths.js'



* app/sub-common/files:
This sub-folder is used to store script files that need to be accessed by multiple parts in a codependent manner. The reason these particular files need to be stored inside the subfolders is so they are siblings to the dependent script files. This is so they can access other files within the project and the Controller as if they belonged to a specific file or part. Both the common and the test file would start in the same folder when referring to something

'root/app/sub-common/files/example.js'
'root/test-parts/part-x-example_name/example/e-script.js'

While most test script parts have their own subfolder for this purpose, having the same structure in 'app' enables these files to be accessed across multiple parts while also having the same access and scope



* backup:
This folder is simply used to store files or excerpts that are not actively involved in the project but still should be kept for future reference. How you use this folder is up to you but the reason it is there is because if there is a part of the script that needs to be removed, you can place it safely in a backup file rather than just get rid of it outright. Only when you are sure that the contents are not needed anymore, you can delete it.



* information:
This folder was created to store the tutorial text files which this particular text file is a part of. Of course, you can add other text files in the future. This could be personal notes, a to-do list, anything that can be considered information you can refer to


* node_modules:
This folder contains files related to the Node JS modules used by the project. For the most part, you don't need to worry about this folder as long as it is there. If you look in the project root and see that it isn't, you may want to (re)install.

One side-note is that when you make a backup, commit, or send this project anywhere, do not include the 'node_modules' folder. Otherwise, more space will be used and it will take longer to transfer than necessary. Instead, the user is supposed to download the project and then install the modules through Node JS. In short, 200kb is a lot smaller than 20MB. The 'package.json' file keeps track of what modules are required.

Any module that is part of the test framework is exempt from testing itself. For modules that are used by the project and not crucial, they are tested in part B



* test:
This folder contains the main part of the test script. When you run the "npm test" command, the test framework executes the one script file in this folder. With that being said, you should not add anything to this folder. If you want to add something to the test script, put it within 'test-parts' and have the 'test' file call it.



* test-parts:
At first, the test script was one large file. Then it got too complex and tedious to maintain, so it was split into different parts. This folder contains the different parts. Each one is a subfolder named as 'part-x-example_name'. For more information about how these parts are arranged, see the 'parts' subfolder.